{"ast":null,"code":"// src/axiosConfig.js\nimport axios from 'axios';\n\n// Cria uma instância do axios com a URL base da API\nconst instance = axios.create({\n  baseURL: 'http://localhost:5000' // URL base para suas APIs\n});\n\n// Função para atualizar o cabeçalho Authorization\nconst setAuthHeader = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    instance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete instance.defaults.headers.common['Authorization'];\n  }\n};\n\n// Atualiza o cabeçalho Authorization antes de cada solicitação\ninstance.interceptors.request.use(config => {\n  setAuthHeader();\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor para lidar com erros relacionados à autenticação\ninstance.interceptors.response.use(response => response, async error => {\n  if (error.response && error.response.status === 401) {\n    // Lógica para lidar com a expiração do token\n    // Por exemplo, você pode tentar renovar o token ou redirecionar para login\n    // Exemplo básico de chamada para renovar o token (caso tenha um endpoint para isso):\n    try {\n      // const refreshTokenResponse = await axios.post('/api/refresh-token');\n      // const { newToken } = refreshTokenResponse.data;\n      // localStorage.setItem('token', newToken);\n      // setAuthHeader(); // Atualiza o cabeçalho Authorization\n      // return instance(error.config); // Tenta a requisição original novamente\n    } catch (refreshError) {\n      console.error('Token refresh failed:', refreshError);\n      // Redireciona para a página de login ou mostra uma mensagem de erro\n      // window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","setAuthHeader","token","localStorage","getItem","defaults","headers","common","interceptors","request","use","config","error","Promise","reject","response","status","refreshError","console"],"sources":["C:/Users/Isaac Risola/Desktop/Teste Jack Experts/frontend/src/axiosConfig.js"],"sourcesContent":["// src/axiosConfig.js\r\nimport axios from 'axios';\r\n\r\n// Cria uma instância do axios com a URL base da API\r\nconst instance = axios.create({\r\n  baseURL: 'http://localhost:5000', // URL base para suas APIs\r\n});\r\n\r\n// Função para atualizar o cabeçalho Authorization\r\nconst setAuthHeader = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    instance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    delete instance.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\n// Atualiza o cabeçalho Authorization antes de cada solicitação\r\ninstance.interceptors.request.use(\r\n  config => {\r\n    setAuthHeader();\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Interceptor para lidar com erros relacionados à autenticação\r\ninstance.interceptors.response.use(\r\n  response => response,\r\n  async error => {\r\n    if (error.response && error.response.status === 401) {\r\n      // Lógica para lidar com a expiração do token\r\n      // Por exemplo, você pode tentar renovar o token ou redirecionar para login\r\n      // Exemplo básico de chamada para renovar o token (caso tenha um endpoint para isso):\r\n      try {\r\n        // const refreshTokenResponse = await axios.post('/api/refresh-token');\r\n        // const { newToken } = refreshTokenResponse.data;\r\n        // localStorage.setItem('token', newToken);\r\n        // setAuthHeader(); // Atualiza o cabeçalho Authorization\r\n        // return instance(error.config); // Tenta a requisição original novamente\r\n      } catch (refreshError) {\r\n        console.error('Token refresh failed:', refreshError);\r\n        // Redireciona para a página de login ou mostra uma mensagem de erro\r\n        // window.location.href = '/login';\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAE,uBAAuB,CAAE;AACpC,CAAC,CAAC;;AAEF;AACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTJ,QAAQ,CAACO,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;EACvE,CAAC,MAAM;IACL,OAAOJ,QAAQ,CAACO,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;EAC1D;AACF,CAAC;;AAED;AACAT,QAAQ,CAACU,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAI;EACRV,aAAa,CAAC,CAAC;EACf,OAAOU,MAAM;AACf,CAAC,EACDC,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,QAAQ,CAACU,YAAY,CAACO,QAAQ,CAACL,GAAG,CAChCK,QAAQ,IAAIA,QAAQ,EACpB,MAAMH,KAAK,IAAI;EACb,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACA;IACA;IACA,IAAI;MACF;MACA;MACA;MACA;MACA;IAAA,CACD,CAAC,OAAOC,YAAY,EAAE;MACrBC,OAAO,CAACN,KAAK,CAAC,uBAAuB,EAAEK,YAAY,CAAC;MACpD;MACA;IACF;EACF;EACA,OAAOJ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}