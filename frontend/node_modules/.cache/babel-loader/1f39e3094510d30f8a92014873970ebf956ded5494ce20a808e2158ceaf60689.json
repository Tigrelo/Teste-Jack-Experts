{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Isaac Risola\\\\Desktop\\\\Teste Jack Experts\\\\frontend\\\\src\\\\components\\\\Task.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify'; // Importa a biblioteca de notificações\nimport Task from '../components/Task'; // Importa o componente para exibir uma única tarefa\nimport TaskForm from '../components/TaskForm'; // Importa o componente de formulário de tarefas\n\n// Componente principal para gerenciar tarefas\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tasks = () => {\n  _s();\n  const [tasks, setTasks] = useState([]); // Estado para armazenar a lista de tarefas\n\n  // useEffect para buscar tarefas ao montar o componente\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        // Faz uma requisição GET para buscar todas as tarefas\n        const response = await fetch('http://localhost:5000/tasks', {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          } // Adiciona o token de autenticação nos cabeçalhos\n        });\n        if (!response.ok) throw new Error('Erro ao buscar tarefas'); // Verifica se houve erro na resposta\n        const data = await response.json(); // Converte a resposta para JSON\n        setTasks(data); // Atualiza o estado com as tarefas recebidas\n        toast.success('Tarefas carregadas com sucesso!'); // Notificação de sucesso\n      } catch (error) {\n        toast.error(error.message); // Notificação de erro em caso de falha\n      }\n    };\n    fetchTasks(); // Chama a função para buscar tarefas\n  }, []); // Executa uma vez ao montar o componente\n\n  // Função para adicionar uma nova tarefa\n  const handleAddTask = async task => {\n    try {\n      // Faz uma requisição POST para adicionar uma nova tarefa\n      const response = await fetch('http://localhost:5000/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}` // Adiciona o token de autenticação\n        },\n        body: JSON.stringify(task) // Envia a tarefa como JSON no corpo da requisição\n      });\n      if (!response.ok) throw new Error('Erro ao adicionar tarefa'); // Verifica se houve erro na resposta\n      const newTask = await response.json(); // Converte a resposta para JSON\n      setTasks([...tasks, newTask]); // Adiciona a nova tarefa ao estado\n      toast.success('Tarefa adicionada com sucesso!'); // Notificação de sucesso\n    } catch (error) {\n      toast.error(error.message); // Notificação de erro em caso de falha\n    }\n  };\n\n  // Função para atualizar uma tarefa existente\n  const handleUpdateTask = async updatedTask => {\n    try {\n      // Faz uma requisição PUT para atualizar a tarefa especificada\n      const response = await fetch(`http://localhost:5000/tasks/${updatedTask.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}` // Adiciona o token de autenticação\n        },\n        body: JSON.stringify(updatedTask) // Envia a tarefa atualizada como JSON no corpo da requisição\n      });\n      if (!response.ok) throw new Error('Erro ao atualizar tarefa'); // Verifica se houve erro na resposta\n      const task = await response.json(); // Converte a resposta para JSON\n      setTasks(tasks.map(t => t.id === task.id ? task : t)); // Atualiza a tarefa no estado\n      toast.success('Tarefa atualizada com sucesso!'); // Notificação de sucesso\n    } catch (error) {\n      toast.error(error.message); // Notificação de erro em caso de falha\n    }\n  };\n\n  // Função para deletar uma tarefa\n  const handleDeleteTask = async id => {\n    try {\n      // Faz uma requisição DELETE para remover a tarefa especificada\n      const response = await fetch(`http://localhost:5000/tasks/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        } // Adiciona o token de autenticação\n      });\n      if (!response.ok) throw new Error('Erro ao deletar tarefa'); // Verifica se houve erro na resposta\n      setTasks(tasks.filter(t => t.id !== id)); // Remove a tarefa deletada do estado\n      toast.success('Tarefa deletada com sucesso!'); // Notificação de sucesso\n    } catch (error) {\n      toast.error(error.message); // Notificação de erro em caso de falha\n    }\n  };\n\n  // Renderiza o componente\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n      onAddTask: handleAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task =>\n      /*#__PURE__*/\n      // Mapeia e renderiza cada tarefa\n      _jsxDEV(Task, {\n        task: task,\n        onUpdateTask: handleUpdateTask // Passa a função de atualização de tarefa\n        ,\n        onDeleteTask: handleDeleteTask // Passa a função de deleção de tarefa\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(Tasks, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = Tasks;\nexport default Tasks;\nvar _c;\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"names":["React","useState","useEffect","toast","Task","TaskForm","jsxDEV","_jsxDEV","Tasks","_s","tasks","setTasks","fetchTasks","response","fetch","headers","localStorage","getItem","ok","Error","data","json","success","error","message","handleAddTask","task","method","body","JSON","stringify","newTask","handleUpdateTask","updatedTask","id","map","t","handleDeleteTask","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddTask","onUpdateTask","onDeleteTask","_c","$RefreshReg$"],"sources":["C:/Users/Isaac Risola/Desktop/Teste Jack Experts/frontend/src/components/Task.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { toast } from 'react-toastify'; // Importa a biblioteca de notificações\r\nimport Task from '../components/Task'; // Importa o componente para exibir uma única tarefa\r\nimport TaskForm from '../components/TaskForm'; // Importa o componente de formulário de tarefas\r\n\r\n// Componente principal para gerenciar tarefas\r\nconst Tasks = () => {\r\n  const [tasks, setTasks] = useState([]); // Estado para armazenar a lista de tarefas\r\n\r\n  // useEffect para buscar tarefas ao montar o componente\r\n  useEffect(() => {\r\n    const fetchTasks = async () => {\r\n      try {\r\n        // Faz uma requisição GET para buscar todas as tarefas\r\n        const response = await fetch('http://localhost:5000/tasks', {\r\n          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` } // Adiciona o token de autenticação nos cabeçalhos\r\n        });\r\n        if (!response.ok) throw new Error('Erro ao buscar tarefas'); // Verifica se houve erro na resposta\r\n        const data = await response.json(); // Converte a resposta para JSON\r\n        setTasks(data); // Atualiza o estado com as tarefas recebidas\r\n        toast.success('Tarefas carregadas com sucesso!'); // Notificação de sucesso\r\n      } catch (error) {\r\n        toast.error(error.message); // Notificação de erro em caso de falha\r\n      }\r\n    };\r\n    fetchTasks(); // Chama a função para buscar tarefas\r\n  }, []); // Executa uma vez ao montar o componente\r\n\r\n  // Função para adicionar uma nova tarefa\r\n  const handleAddTask = async (task) => {\r\n    try {\r\n      // Faz uma requisição POST para adicionar uma nova tarefa\r\n      const response = await fetch('http://localhost:5000/tasks', {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}` // Adiciona o token de autenticação\r\n        },\r\n        body: JSON.stringify(task), // Envia a tarefa como JSON no corpo da requisição\r\n      });\r\n      if (!response.ok) throw new Error('Erro ao adicionar tarefa'); // Verifica se houve erro na resposta\r\n      const newTask = await response.json(); // Converte a resposta para JSON\r\n      setTasks([...tasks, newTask]); // Adiciona a nova tarefa ao estado\r\n      toast.success('Tarefa adicionada com sucesso!'); // Notificação de sucesso\r\n    } catch (error) {\r\n      toast.error(error.message); // Notificação de erro em caso de falha\r\n    }\r\n  };\r\n\r\n  // Função para atualizar uma tarefa existente\r\n  const handleUpdateTask = async (updatedTask) => {\r\n    try {\r\n      // Faz uma requisição PUT para atualizar a tarefa especificada\r\n      const response = await fetch(`http://localhost:5000/tasks/${updatedTask.id}`, {\r\n        method: 'PUT',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}` // Adiciona o token de autenticação\r\n        },\r\n        body: JSON.stringify(updatedTask), // Envia a tarefa atualizada como JSON no corpo da requisição\r\n      });\r\n      if (!response.ok) throw new Error('Erro ao atualizar tarefa'); // Verifica se houve erro na resposta\r\n      const task = await response.json(); // Converte a resposta para JSON\r\n      setTasks(tasks.map(t => t.id === task.id ? task : t)); // Atualiza a tarefa no estado\r\n      toast.success('Tarefa atualizada com sucesso!'); // Notificação de sucesso\r\n    } catch (error) {\r\n      toast.error(error.message); // Notificação de erro em caso de falha\r\n    }\r\n  };\r\n\r\n  // Função para deletar uma tarefa\r\n  const handleDeleteTask = async (id) => {\r\n    try {\r\n      // Faz uma requisição DELETE para remover a tarefa especificada\r\n      const response = await fetch(`http://localhost:5000/tasks/${id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` } // Adiciona o token de autenticação\r\n      });\r\n      if (!response.ok) throw new Error('Erro ao deletar tarefa'); // Verifica se houve erro na resposta\r\n      setTasks(tasks.filter(t => t.id !== id)); // Remove a tarefa deletada do estado\r\n      toast.success('Tarefa deletada com sucesso!'); // Notificação de sucesso\r\n    } catch (error) {\r\n      toast.error(error.message); // Notificação de erro em caso de falha\r\n    }\r\n  };\r\n\r\n  // Renderiza o componente\r\n  return (\r\n    <div>\r\n      <h2>Tasks</h2>\r\n      <TaskForm onAddTask={handleAddTask} /> {/* Componente de formulário para adicionar ou editar tarefas */}\r\n      <ul>\r\n        {tasks.map(task => ( // Mapeia e renderiza cada tarefa\r\n          <Task\r\n            key={task.id}\r\n            task={task}\r\n            onUpdateTask={handleUpdateTask} // Passa a função de atualização de tarefa\r\n            onDeleteTask={handleDeleteTask} // Passa a função de deleção de tarefa\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}