{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Isaac Risola\\\\Desktop\\\\Teste-Jack-Experts\\\\frontend\\\\src\\\\components\\\\TaskForm.js\",\n  _s = $RefreshSig$();\n// src/components/TaskForm.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskForm = ({\n  selectedTask,\n  setSelectedTask,\n  setTasks,\n  onAddTask,\n  onUpdateTask\n}) => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [completed, setCompleted] = useState(false);\n  useEffect(() => {\n    if (selectedTask) {\n      setTitle(selectedTask.title);\n      setDescription(selectedTask.description);\n      setCompleted(selectedTask.completed);\n    } else {\n      setTitle('');\n      setDescription('');\n      setCompleted(false);\n    }\n  }, [selectedTask]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      if (selectedTask) {\n        // Atualizar tarefa existente\n        await onUpdateTask({\n          ...selectedTask,\n          title,\n          description,\n          completed\n        });\n      } else {\n        // Criar nova tarefa\n        await onAddTask({\n          title,\n          description,\n          completed\n        }); // Usando onAddTask\n      }\n      setTitle('');\n      setDescription('');\n      setCompleted(false);\n      setSelectedTask(null); // Limpa a seleção após a adição ou atualização\n    } catch (error) {\n      console.error('Erro ao salvar tarefa:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"T\\xEDtulo\",\n      value: title,\n      onChange: e => setTitle(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Descri\\xE7\\xE3o\",\n      value: description,\n      onChange: e => setDescription(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Conclu\\xEDda\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: completed,\n        onChange: e => setCompleted(e.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: [selectedTask ? 'Atualizar' : 'Adicionar', \" Tarefa\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskForm, \"iIxRGX9jvW+osPhBjYr8rjrPwj4=\");\n_c = TaskForm;\nexport default TaskForm;\nvar _c;\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TaskForm","selectedTask","setSelectedTask","setTasks","onAddTask","onUpdateTask","_s","title","setTitle","description","setDescription","completed","setCompleted","handleSubmit","e","preventDefault","error","console","onSubmit","children","type","placeholder","value","onChange","target","required","fileName","_jsxFileName","lineNumber","columnNumber","checked","_c","$RefreshReg$"],"sources":["C:/Users/Isaac Risola/Desktop/Teste-Jack-Experts/frontend/src/components/TaskForm.js"],"sourcesContent":["// src/components/TaskForm.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TaskForm = ({ selectedTask, setSelectedTask, setTasks, onAddTask, onUpdateTask }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [completed, setCompleted] = useState(false);\n\n  useEffect(() => {\n    if (selectedTask) {\n      setTitle(selectedTask.title);\n      setDescription(selectedTask.description);\n      setCompleted(selectedTask.completed);\n    } else {\n      setTitle('');\n      setDescription('');\n      setCompleted(false);\n    }\n  }, [selectedTask]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      if (selectedTask) {\n        // Atualizar tarefa existente\n        await onUpdateTask({ ...selectedTask, title, description, completed });\n      } else {\n        // Criar nova tarefa\n        await onAddTask({ title, description, completed });  // Usando onAddTask\n      }\n      setTitle('');\n      setDescription('');\n      setCompleted(false);\n      setSelectedTask(null); // Limpa a seleção após a adição ou atualização\n    } catch (error) {\n      console.error('Erro ao salvar tarefa:', error);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Título\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n        required\n      />\n      <textarea\n        placeholder=\"Descrição\"\n        value={description}\n        onChange={(e) => setDescription(e.target.value)}\n      />\n      <label>\n        Concluída\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          onChange={(e) => setCompleted(e.target.checked)}\n        />\n      </label>\n      <button type=\"submit\">{selectedTask ? 'Atualizar' : 'Adicionar'} Tarefa</button>\n    </form>\n  );\n};\n\nexport default TaskForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}