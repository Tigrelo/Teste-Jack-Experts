{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Isaac Risola\\\\Desktop\\\\Teste Jack Experts\\\\frontend\\\\src\\\\pages\\\\Tasks.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Task from '../components/Task'; // Importe o componente Task\nimport TaskForm from '../components/TaskForm'; // Importe o componente TaskForm\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tasks = () => {\n  _s();\n  // Estado para armazenar as tarefas\n  const [tasks, setTasks] = useState([]);\n  // Estado para controlar se os dados estão carregando\n  const [loading, setLoading] = useState(true);\n  // Estado para armazenar mensagens de erro\n  const [error, setError] = useState(null);\n\n  // Hook useEffect para buscar as tarefas quando o componente é montado\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        // Fetch as tarefas do backend\n        const response = await fetch('http://localhost:5000/tasks', {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n\n        // Verifica se a resposta foi bem-sucedida\n        if (!response.ok) {\n          throw new Error('Erro ao buscar tarefas');\n        }\n\n        // Converte a resposta para JSON e atualiza o estado das tarefas\n        const data = await response.json();\n        setTasks(data);\n      } catch (err) {\n        // Captura e armazena a mensagem de erro, se houver\n        setError(err.message);\n      } finally {\n        // Atualiza o estado de carregamento para falso\n        setLoading(false);\n      }\n    };\n    fetchTasks(); // Chama a função para buscar as tarefas\n  }, []); // Dependência vazia para rodar apenas na montagem\n\n  // Função para adicionar uma nova tarefa\n  const handleAddTask = async task => {\n    try {\n      // Envia a nova tarefa para o backend\n      const response = await fetch('http://localhost:5000/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify(task)\n      });\n\n      // Verifica se a resposta foi bem-sucedida\n      if (!response.ok) {\n        throw new Error('Erro ao adicionar tarefa');\n      }\n\n      // Converte a resposta para JSON e atualiza o estado das tarefas\n      const newTask = await response.json();\n      setTasks([...tasks, newTask]);\n    } catch (err) {\n      // Captura e armazena a mensagem de erro, se houver\n      setError(err.message);\n    }\n  };\n\n  // Função para atualizar uma tarefa existente\n  const handleUpdateTask = async updatedTask => {\n    try {\n      // Envia a tarefa atualizada para o backend\n      const response = await fetch(`http://localhost:5000/tasks/${updatedTask.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify(updatedTask)\n      });\n\n      // Verifica se a resposta foi bem-sucedida\n      if (!response.ok) {\n        throw new Error('Erro ao atualizar tarefa');\n      }\n\n      // Converte a resposta para JSON e atualiza o estado das tarefas\n      const task = await response.json();\n      setTasks(tasks.map(t => t.id === task.id ? task : t));\n    } catch (err) {\n      // Captura e armazena a mensagem de erro, se houver\n      setError(err.message);\n    }\n  };\n\n  // Função para excluir uma tarefa\n  const handleDeleteTask = async id => {\n    try {\n      // Envia uma requisição para excluir a tarefa\n      const response = await fetch(`http://localhost:5000/tasks/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      // Verifica se a resposta foi bem-sucedida\n      if (!response.ok) {\n        throw new Error('Erro ao excluir tarefa');\n      }\n\n      // Atualiza o estado das tarefas removendo a tarefa excluída\n      setTasks(tasks.filter(t => t.id !== id));\n    } catch (err) {\n      // Captura e armazena a mensagem de erro, se houver\n      setError(err.message);\n    }\n  };\n\n  // Renderiza um estado de carregamento se as tarefas estiverem sendo carregadas\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Renderiza uma mensagem de erro se houver um erro\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Renderiza a lista de tarefas e o formulário de adicionar tarefas\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n      onAddTask: handleAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n        task: task,\n        onUpdateTask: handleUpdateTask,\n        onDeleteTask: handleDeleteTask\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(Tasks, \"qwRs5Xd4E7WtXCZK9zh6nomhOw4=\");\n_c = Tasks;\nexport default Tasks;\nvar _c;\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"names":["React","useState","useEffect","Task","TaskForm","jsxDEV","_jsxDEV","Tasks","_s","tasks","setTasks","loading","setLoading","error","setError","fetchTasks","response","fetch","headers","localStorage","getItem","ok","Error","data","json","err","message","handleAddTask","task","method","body","JSON","stringify","newTask","handleUpdateTask","updatedTask","id","map","t","handleDeleteTask","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddTask","onUpdateTask","onDeleteTask","_c","$RefreshReg$"],"sources":["C:/Users/Isaac Risola/Desktop/Teste Jack Experts/frontend/src/pages/Tasks.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Task from '../components/Task';  // Importe o componente Task\r\nimport TaskForm from '../components/TaskForm';  // Importe o componente TaskForm\r\n\r\nconst Tasks = () => {\r\n  // Estado para armazenar as tarefas\r\n  const [tasks, setTasks] = useState([]);\r\n  // Estado para controlar se os dados estão carregando\r\n  const [loading, setLoading] = useState(true);\r\n  // Estado para armazenar mensagens de erro\r\n  const [error, setError] = useState(null);\r\n\r\n  // Hook useEffect para buscar as tarefas quando o componente é montado\r\n  useEffect(() => {\r\n    const fetchTasks = async () => {\r\n      try {\r\n        // Fetch as tarefas do backend\r\n        const response = await fetch('http://localhost:5000/tasks', {\r\n          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n        });\r\n\r\n        // Verifica se a resposta foi bem-sucedida\r\n        if (!response.ok) {\r\n          throw new Error('Erro ao buscar tarefas');\r\n        }\r\n\r\n        // Converte a resposta para JSON e atualiza o estado das tarefas\r\n        const data = await response.json();\r\n        setTasks(data);\r\n      } catch (err) {\r\n        // Captura e armazena a mensagem de erro, se houver\r\n        setError(err.message);\r\n      } finally {\r\n        // Atualiza o estado de carregamento para falso\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTasks();  // Chama a função para buscar as tarefas\r\n  }, []);  // Dependência vazia para rodar apenas na montagem\r\n\r\n  // Função para adicionar uma nova tarefa\r\n  const handleAddTask = async (task) => {\r\n    try {\r\n      // Envia a nova tarefa para o backend\r\n      const response = await fetch('http://localhost:5000/tasks', {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(task),\r\n      });\r\n\r\n      // Verifica se a resposta foi bem-sucedida\r\n      if (!response.ok) {\r\n        throw new Error('Erro ao adicionar tarefa');\r\n      }\r\n\r\n      // Converte a resposta para JSON e atualiza o estado das tarefas\r\n      const newTask = await response.json();\r\n      setTasks([...tasks, newTask]);\r\n    } catch (err) {\r\n      // Captura e armazena a mensagem de erro, se houver\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Função para atualizar uma tarefa existente\r\n  const handleUpdateTask = async (updatedTask) => {\r\n    try {\r\n      // Envia a tarefa atualizada para o backend\r\n      const response = await fetch(`http://localhost:5000/tasks/${updatedTask.id}`, {\r\n        method: 'PUT',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(updatedTask),\r\n      });\r\n\r\n      // Verifica se a resposta foi bem-sucedida\r\n      if (!response.ok) {\r\n        throw new Error('Erro ao atualizar tarefa');\r\n      }\r\n\r\n      // Converte a resposta para JSON e atualiza o estado das tarefas\r\n      const task = await response.json();\r\n      setTasks(tasks.map(t => t.id === task.id ? task : t));\r\n    } catch (err) {\r\n      // Captura e armazena a mensagem de erro, se houver\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Função para excluir uma tarefa\r\n  const handleDeleteTask = async (id) => {\r\n    try {\r\n      // Envia uma requisição para excluir a tarefa\r\n      const response = await fetch(`http://localhost:5000/tasks/${id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n      });\r\n\r\n      // Verifica se a resposta foi bem-sucedida\r\n      if (!response.ok) {\r\n        throw new Error('Erro ao excluir tarefa');\r\n      }\r\n\r\n      // Atualiza o estado das tarefas removendo a tarefa excluída\r\n      setTasks(tasks.filter(t => t.id !== id));\r\n    } catch (err) {\r\n      // Captura e armazena a mensagem de erro, se houver\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Renderiza um estado de carregamento se as tarefas estiverem sendo carregadas\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // Renderiza uma mensagem de erro se houver um erro\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  // Renderiza a lista de tarefas e o formulário de adicionar tarefas\r\n  return (\r\n    <div>\r\n      <h2>Tasks</h2>\r\n      <TaskForm onAddTask={handleAddTask} />\r\n      <ul>\r\n        {tasks.map(task => (\r\n          <Task\r\n            key={task.id}\r\n            task={task}\r\n            onUpdateTask={handleUpdateTask}\r\n            onDeleteTask={handleDeleteTask}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}